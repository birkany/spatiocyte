<?xml version="1.0" encoding="UTF-8" ?>
<package>
  <job>
    <reference object="Scripting.FileSystemObject" />
    <object id="FileSystemObject" progid="Scripting.FileSystemObject" />
    <object id="WshShell" progid="WScript.Shell" />
    <script language="JScript" src="buildhelper.js" />
    <script language="JScript"><![CDATA[
var buildInfo = {
    debugBuild: false
};

(function() {
    var args = new BuildHelper.ArgsParser(
        [
            {
                short: 'g',
                receiver: function() {
                    buildInfo.debugBuild = true;
                }
            }
        ]).parse(WScript.Arguments);

    buildInfo = buildInfo.mix(
        {
            vcOutDir:   args.real_args[0],
            projectDir: args.real_args[1],
            distDir:    args.real_args[2],
            pythonHome: WshShell.Environment("Process")("PYTHONHOME")
        }.map(WrapIDispatchMethod(FileSystemObject, 'GetAbsolutePathName(path)'))
    );
}).call();
]]></script>
    <script language="JScript" src="info.js" />
    <script language="JScript"><![CDATA[
var tasks = {
    installECS: function() {
        var ecsDir = this.projectDir + 'ecell\\libecs\\';
        var destDir;

        destDir = this.distIncludeEcellDir + 'libecs\\';
        BuildHelper.mkdir(destDir);
        BuildHelper.copy(ecsDir + '*.hpp', destDir);
        BuildHelper.copy(ecsDir + '*.h', destDir);

        BuildHelper.mkdir(this.distLibDir);
        BuildHelper.copy(this.vcOutDir + 'ecs.lib', this.distLibDir);

        BuildHelper.mkdir(this.distBinDir);
        BuildHelper.copy(this.vcOutDir + 'ecs.dll', this.distBinDir);
    },

    installPyECS: function() {
        var pyECSDir = this.projectDir + 'ecell\\pyecs\\';
        BuildHelper.chdir(pyECSDir);
        this.execPythonScript([
                'setup.py',
                'build',
                '-b', this.vcOutDir + 'pyecs.build'
            ].concat(this.debugBuild ? [ '-g' ]: []).concat([
                'install',
                '--prefix', '\\',
                '--root', this.distDir
            ]));
    },

    installPyECell: function() {
        var pyECellDir = this.projectDir + 'ecell\\pyecell\\';
        BuildHelper.chdir(pyECellDir);
        this.execPythonScript(
            [
                'setup.py',
                'build',
                '-b', this.vcOutDir + 'pyecell.build'
            ].concat(this.debugBuild ? [ '-g' ]: []).concat([
                'install',
                '--prefix', '\\',
                '--root', this.distDir
            ]));
    },

    installDMObjects: function() {
        var dmObjectsDir = this.projectDir + 'ecell\\dm\\';
        var destDir;

        destDir = this.distLibEcellDir + 'dms\\';
        BuildHelper.mkdir(destDir);
        BuildHelper.copy(this.vcOutDir + 'dm\\*.dll', destDir);
        BuildHelper.copy(dmObjectsDir + '*.desc', destDir);
    },

    installEMC: function() {
        var emcDir = this.projectDir + 'ecell\\libemc\\';
        var destDir;

        destDir = this.distIncludeEcellDir + 'libemc\\';
        BuildHelper.mkdir(destDir);
        BuildHelper.copy(emcDir + '*.hpp', destDir);

        BuildHelper.mkdir(this.distLibDir);
        BuildHelper.copy(this.vcOutDir + 'emc.lib', this.distLibDir);

        BuildHelper.mkdir(this.distBinDir);
        BuildHelper.copy(this.vcOutDir + 'emc.dll', this.distBinDir);
    },

    installDMTool: function() {
        var dmToolDir = this.projectDir + 'dmtool\\';
        var destDir = this.distIncludeDir + 'dmtool\\';

        BuildHelper.mkdir(destDir);
        BuildHelper.copy(dmToolDir + '*.hpp', destDir);
    },

    installSessionMonitor: function() {
        var sessionMonitorDir = this.projectDir + 'ecell\\model-editor\\';
        BuildHelper.chdir(sessionMonitorDir);
        this.execPythonScript(
            [
                'setup.py',
                'build',
                '-b', this.vcOutDir + 'model-editor.build'
            ].concat(this.debugBuild ? [ '-g' ]: []).concat([
                'install',
                '--prefix', '\\',
                '--root', this.distDir
            ]));
    },

    installModelEditor: function() {
        var modelEditorDir = this.projectDir + 'ecell\\session-monitor\\';
        BuildHelper.chdir(modelEditorDir);
        this.execPythonScript(
            [
                'setup.py',
                'build',
                '-b', this.vcOutDir + 'session-monitor.build'
            ].concat(this.debugBuild ? [ '-g' ]: []).concat([
                'install',
                '--prefix', '\\',
                '--root', this.distDir
            ]));
    },

    install: function() {
        this.installECS();
        this.installEMC();
        this.installDMTool();
        this.installDMObjects();
        this.installPyECS();
        this.installPyECell();
        this.installModelEditor();
        this.installSessionMonitor();
    }
};

WScript.Quit(new BuildHelper(buildInfo).run(tasks, 'install'));

]]></script>
  </job>
</package>
