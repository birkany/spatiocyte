#!/bin/sh
#
# ecell3-dmc  - a program to compile and/or docify dynamic module in 
#               E-Cell Simulation Environment Version 3
#
# author: Tomoya Kitayama <tomo@e-cell.org>
#

#PACKAGE=@PACKAGE@
#VERSION=@VERSION@

prefix=@prefix@
exec_prefix=@prefix@

BINDIR="${exec_prefix}/bin"
STDLIBDIR="${exec_prefix}/lib"

ECELL_INCLUDE="${prefix}/include/ecell"
LIBECS_INCLUDE="${ECELL_INCLUDE}/libecs"

STDINCLUDE="-I${prefix}/include -I${ECELL_INCLUDE} -I${LIBECS_INCLUDE} -I."

DMCOMPILE="${BINDIR}/dmcompile"

unset CXXFLAGS LDFLAGS VERBOSE NO_STDINCLUDE NO_STDLIBDIR

usage() 
{
cat << EOT_USAGE
Compile dynamic modules for E-Cell Simulation Environment Versin 3.

Usage:
	`basename $0` [ ecell3-dmc options ] sourcefile [ compiler options ]
	`basename $0` -h|--help
EOT_USAGE
}

help()
{
usage
cat << EOT_HELP

ecell3-dmc options:
        --no-stdinclude          Don't set standard include file path.
        --no-stdlibdir           Don't set standard include file path.
        --ldflags=[ldflags]      Specify options to the linker.
        --cxxflags=[cxxflags]    Override the default compiler options.
        --dmcompile=[path]       Specify dmcompile path.
        -v or --verbose   	 Be verbose.
        -h or --help		 Print this message.


This program is part of E-Cell Simulation Environment Version 3.
Written by Tomoya Kitayama <tomo@e-cell.org>
EOT_HELP
}

initialize()
{
	trap interrupted 2 9 15
}

interrupted()
{
    echo "interrupted..."
    trap '' 2 9 15
    exit 1
}

message()
{
    if [ $VERBOSE ] ; then
	echo $@
    fi
}



run_command()
{
    message $@

    if [ $VERBOSE ] ; then
	$@
    else
	$@ > /dev/null
    fi
}

#at least one argument is required

if [ -z $1 ] ;then 
    help;
    exit 1
fi

# print help message
 
if [ "$1" = "-h" -o "$1" = "--help" ] ; then
    help
    exit 0
fi

while [ -n "$(echo $1 | grep '-')" ]; do
    case "$1" in
	--no-stdinclude) NO_STDINCLUDE=yes ; shift ;;
	--no-stdlibdir) NO_STDLIBDIR=yes ; shift ;;
	--ldflags=*) LDFLAGS="$LDFLAGS $( echo $1 | cut -d'=' -f2 )"; shift ;;
	--cxxflags=*) CXXFLAGS="$CXXFLAGS $( echo $1 | cut -d'=' -f2 )"; shift ;;
	--dmcompile=*) DMCOMPILE=$( echo $1 | cut -d'=' -f2 )/dmcompile ; shift ;;
	-v|--verbose) VERBOSE=yes ; shift ;;
	-h|--help) help ; exit 0 ;;
	*) echo "Invarid Option! " ; help ; exit 1 ;;
    esac
done

#
#initialize & get filename
#

initialize

SRC=$1 ;shift

if [ -z $SRC ] ; then
    echo "Error: source file not given."
    exit 1
fi

if [ ! -f $SRC ] ; then
    echo "Error: $SRC not found."
    exit 1
fi


CLASSNAME=$( echo $SRC | cut -d'.' -f1 ) 

CLASSNAMEDEFINE="-D_ECELL3_DM_CLASSNAME=$CLASSNAME"
CXXCOMPILEFLAGS="$*"


if [ $NO_STDINCLUDE ] ; then
    INCLUDE=""
else
    INCLUDE=${STDINCLUDE}
fi


if [ ! $NO_STDLIBDIR ] ; then
    LDFLAGS="$LDFLAGS $STDLIBDIR"
fi


LDFLAGS="$LDFLAGS -lecs"

export LDFLAGS

if [ -n $CXXFLAGS ] ; then
    export CXXFLAGS
fi


#
#Compile
#
command_string="$DMCOMPILE $SRC $INCLUDE $CLASSNAMEDEFINE $CXXCOMPILEFLAGS"

run_command $command_string

exitcode=$?
if [ $exitcode -ne 0 ] ; then
    echo "Error: dmcompile failed."
    exit $exitcode
fi


exit 0
