#!/usr/bin/env @prefix@ecell3-python

import sys
import os
import glob
import string
import getopt

prefix=os.environ['ECELL3_PREFIX']
exec_prefix=prefix
libdir=exec_prefix + os.sep + 'lib'
CXX='@CXX@'
ORIG_CXXFLAGS="@CXXFLAGS@"
LDADD='-lstdc++'
SHLEXT='@LTDL_SHLIB_EXT@'
CXXSUFFIX='.cpp'
CXXFLAGS = os.environ.get('CXXFLAGS','')
VERBOSE = False

def help():
    ext = os.path.basename( sys.argv[0] )
    aProgramName, ext = os.path.splitext( ext )
    print '''
%s -- Compile dynamic modules for E-Cell Simulation Environment Version 3

Usage:
       %s [-v|--verbose] <source.cpp> [compile options]
       %s [-h|--help]
    '''% ( aProgramName, aProgramName, aProgramName )

def msg( outstr ):
    print "E-Cell3 dmcompile: " + outstr

def execute( cmdstr ):
    if VERBOSE:
	print cmdstr
    return os.system( cmdstr )

def compile( CXX, CXXCOMPILEFLAGS, SRC ):
    return execute( CXX + ' ' + CXXCOMPILEFLAGS + ' -fPIC -c ' + SRC )

def link( CXX, OBJ, SOBJ, LDFLAGS ):
    return execute( CXX + ' -shared ' + OBJ + ' -o ' + SOBJ + ' ' + LDFLAGS )

def cleanup( OBJ ):
    if os.path.isfile( OBJ ):
	os.remove( OBJ )
    
def main():
    opts , args = getopt.getopt( sys.argv[1:], "hv", ["help", "verbose"])   
    global VERBOSE
    
    for anOption, anArg in opts:

	# print help message
        if anOption in ( "-h", '--help' ):
            help()
            sys.exit(0)
      
  	# be verbose
        if anOption in ( "-v", '--verbose'):
	    VERBOSE = True 

    # check if source file is given
    if len( args ) < 1:
	help()
	msg( "Error: source file was not given." )
	sys.exit(1)

    # check if source file is valid
    if len( glob.glob ( args[0].replace( '\"', '' ) ) ) < 1:
	msg( "Error: source file "+ args[0] + " was not found." )
	sys.exit(1)
		
    SRC = args[0]
    ext = os.path.basename(SRC)
    CLASSNAME, ext = os.path.splitext( ext.replace( '\"', '' ) )
    OBJ = CLASSNAME + '.o'
    SOBJ = CLASSNAME + SHLEXT
    LDFLAGS =  os.environ.get('LDFLAGS','')
    LDFLAGS = '-Wl,-rpath=\"' + libdir + '\",-soname=\"' + SOBJ + '\" ' + \
              LDFLAGS 
    ARGS = ' \"' + string.join( args[1:], '\" \"' ) + '\"'

    if CXXFLAGS != '':
	CXXCOMPILEFLAGS = CXXFLAGS + ARGS
    else:
	CXXCOMPILEFLAGS = ORIG_CXXFLAGS + ARGS

    if compile( CXX, CXXCOMPILEFLAGS, "\"" + SRC + "\"" ) or not os.path.isfile( OBJ ):
	msg( "Error: The compiler failed to create " + OBJ )
	sys.exit(1)
	
    if link( CXX, '\"' + OBJ + '\"' , '\"' + SOBJ + '\"', LDFLAGS ) or not os.path.isfile( SOBJ ):
	msg( "Error: The compiler failed to create " + SOBJ )
	sys.exit(1)
    
    cleanup( OBJ )

if __name__ == '__main__':
	main()

