#!/bin/sh


CXX=@CXX@
CXXFLAGS="@CXXFLAGS@"
LDADD=-lstdc++
SHLEXT=@LTDL_SHLIB_EXT@
BASENAME=@BASENAME@

CXXSUFFIX=".cpp"

VERBOSE=1


exit_if_failed()
{
    $@
    if [ $? -ne 0 ] ; then
	exit $?
    fi
}


run_command()
{
	if [ $TEST_MODE ] ; then
		echo $@
	else
		[ $VERBOSE ] && echo $@
		$@
	fi
return $?
}

cleanup()
{
	run_command rm -rf .libs
	run_command rm -f $LAOBJ $LOBJ $OBJ
}

move()
{
	run_command mv -f .libs/$SOBJ .
}

compile()
{
	run_command $CXX $CXXCOMPILEFLAGS -fPIC -c $SRC
}

link()
{
	run_command $CXX -shared $OBJ -o $SOBJ -lecs
}


help()
{
cat << EOT_USAGE
Compile dynamic module.

Usage:
	`$BASENAME $0` <source.cpp> [compile options]
	`$BASENAME $0` -h|--help

EOT_USAGE

}


######################################################


## check commandline

# at least one argument is required
if [ -z $1 ] ;  then
	help
	exit 1
fi

if [ "$1" = "-h" -o "$1" = "--help" ] ; then
	help
	exit 0
fi

## set names and variables

SRC=$1 ; shift
CXXCOMPILEFLAGS="$CXXFLAGS $*"
CLASSNAME=`$BASENAME $SRC $CXXSUFFIX`
OBJ=$CLASSNAME.o
LOBJ=$CLASSNAME.lo
LAOBJ=$CLASSNAME.la
SOBJ=$CLASSNAME$SHLEXT


## main routine

exit_if_failed compile
exit_if_failed link
#move
cleanup
