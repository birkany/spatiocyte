#!/usr/bin/python
##::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
##
##        This file is part of E-CELL Simulation Environment package
##
##                Copyright (C) 1996-2000 E-CELL Project
##   Copyright (C) 1998-2000 Japan Science and Technology Corporation (JST)
##
##::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
##
##
## dmtool is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public
## License as published by the Free Software Foundation; either
## version 2 of the License, or (at your option) any later version.
## 
## dmtool is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
## See the GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public
## License along with dmtool -- see the file COPYING.
## If not, write to the Free Software Foundation, Inc.,
## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
## 
##END_HEADER
##
## written by Yusuke Saito <zhaiteng@e-cell.org> at
## E-CELL Project, Lab for Bioinformatics, Keio University
##

import sys
import re
import string
import os

class DmFile:
      
      def __init__(self):
            self.dic = {}
            self.keynum = {}
            self.property = {}
            self.out = ''
            self.prekey = ''

      def read(self, infile):
            self.file = infile
            try:
                  fp = open(self.file,'r')
            except:	
                  print "Not found."
                  sys.exit(1)
            while 1:

                  line = fp.readline()

                  # End of file
                  if not line: break

                  # ??? MS-DOS?
                  line = re.sub('\012','',line)	

                  # skip comment or empty line
                  if re.match('^\#',line) or re.match('^\n',line):
                        continue

                  match = re.match("([\@\%])(\w+):\s*(.*)",line)
                  if not match:
                        self.dic[self.prekey] = self.dic[self.prekey] + line
                        continue

                  type  = match.group(1)
                  key   = match.group(2)
                  value = match.group(3)

                  if key == self.prekey:
                        self.keynum[key] = self.keynum[key] + 1
                  else:
                        self.keynum[key] = 1

                  # get it!
                  self.dic[key] = value

                  # array type 
                  if type == "%":
                        list = string.splitfields(value,",")
                        n = 0
                        for i in list:
                              n = n+1
                              self.property[key,self.keynum[key],n] = i

                  self.prekey = key

class DmTemplate:

      def __init__( self, templatename ):
            self.tdir = 'templates'
            self.outdir = '.'
            self.templatename = templatename
      
      def search_template(self, pathname='templates'):
            if pathname == 'templates':
                  if os.path.isfile(pathname):
                        print 'Please remove file ' + pathname + '.'
                        sys.exit(1)
                  elif os.path.isdir(pathname):
                        self.tdir = './' + pathname
            else:
                  if os.path.isdir(pathname):
                        self.tdir = pathname
                  else:
                        print 'No such directory:' + pathname
                        sys.exit(1)

      def output_directory(self, dir='.'):
            if dir == '.':
                  self.outdir = dir
            else:
                  if os.path.isdir(dir):
                        self.outdir = dir
                  else:
                        print 'No such directory:' + dir
                        sys.exit(1)

      def write(self, dmfile, outfilename):
            self.dmfile = dmfile

            outfile = self.outdir + '/' + outfilename
            try:
                  fp = open(outfile,'w')
            except:
                  print outfile + ": Not found."
                  sys.exit(1)

            buffer = self.generate( self.templatename )

# flush the buffer
            fp.write(buffer)
# clean up
            self.dmfile = None

      def generate(self, key, no = 0):
            buffer = ''
            template_file = self.tdir + '/' + key
            try:
                  tp = open(template_file,'r')
            except:
                  print template_file + ": Not found."
                  return ''

            while 1:
                  line = tp.readline()
                  if not line: break

                  if re.search('\#\(\@\w+\)',line):
                        line = self.sub(line)
                  elif re.search('\#\(\$\d+\)',line):
                        match = re.search('\#\(\$(\d+)\)',line)
                        keyno = match.group(1)
                        line = re.sub('\#\(\$\d+\)', self.dmfile.property[key,no+1,string.atoi(keyno)],line)
                  elif re.search( '\#\(\%\w+\)', line ):
                        match = re.match('\#\(\%(\w+)\)', line )
                        key = match.group(1)
                        line = ''
                        for i in range(self.dmfile.keynum[key]):
                              line = line + self.generate(key,i)
                  buffer = buffer + line

            return buffer

      def sub(self, line):
            buffer = ''
            match = re.search('\#\(\@(\w+)\)', line)
            key = match.group(1)
            if self.dmfile.dic.has_key(key):
                  buffer = re.sub('\#\(\@\w+\)',self.dmfile.dic[key],line)
            else:
                  print "Keyword " + key + " not found."

            return buffer

if __name__ == "__main__":
      
      filename = sys.argv[1]
      sample_template = 'MASTER'
      dmfile = DmFile()
      dmfile.read(filename)
      out_file = 'sample.C'
      dmtemplate = DmTemplate(sample_template)
      dmtemplate.search_template()
      dmtemplate.output_directory()
      dmtemplate.write(dmfile, out_file)
