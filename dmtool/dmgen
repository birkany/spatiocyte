#!/usr/bin/python
##::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
##
##        This file is part of E-CELL Simulation Environment package
##
##                Copyright (C) 2000 - 2001 E-CELL Project
##
##::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
##
##
## dmtool is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public
## License as published by the Free Software Foundation; either
## version 2 of the License, or (at your option) any later version.
## 
## dmtool is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
## See the GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public
## License along with dmtool -- see the file COPYING.
## If not, write to the Free Software Foundation, Inc.,
## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
## 
##END_HEADER
##
## written by Yusuke Saito <zhaiteng@e-cell.org> and
##            Kouichi Takahashi <shafi@e-cell.org> at
## E-CELL Project, Institute for Advanced Biosciences, Keio University
##


import sys
import re
import string
import os
import glob

class DmFile:
      
      commentRegex = re.compile( r'^\#' )
      nlRegex      = re.compile( r'^\n' )
      patternRegex = re.compile( r'([\@\%])(\w+):\s*(.*)' )

      def __init__( self, infilename ):
            self.dic = {}
            self.keynum = {}
            self.property = {}
            self.out = ''
            self.prekey = ''
            self.read( infilename )

      def read( self, infile ):
            self.file = infile

            try:
                  fp = open( self.file, 'r' )
            except:	
                  print self.file, ": file not found."
                  sys.exit( 1 )

            while 1:

                  line = fp.readline()

                  # End of file
                  if not line:
                        break

                  # skip comment or empty line
                  if DmFile.commentRegex.match( line )\
                     or DmFile.nlRegex.match( line ):
                        continue

                  match = DmFile.patternRegex.match( line )
                  if not match:
                        self.dic[self.prekey] = self.dic[self.prekey] + line
                        continue

                  type  = match.group( 1 )
                  key   = match.group( 2 )
                  value = match.group( 3 )

                  if key == self.prekey:
                        self.keynum[key] = self.keynum[key] + 1
                  else:
                        self.keynum[key] = 1

                  # get it!
                  self.dic[key] = value

                  # array type 
                  if type == "%":
                        list = string.splitfields( value, "," )
                        n = 0
                        for i in list:
                              n = n+1
                              self.property[key,self.keynum[key],n] = i

                  self.prekey = key


class DmTemplate:

      regex1 = re.compile( r'\#\(\@(\w+)\)' )
      regex2 = re.compile( r'\#\(\$(\d+)\)' )
      regex3 = re.compile( r'\#\(\%(\w+)\)' )

      def __init__( self, templatedir ):
            self.templatedir = templatedir
      
      def setDmFile( self, dmfile ):
            self.dmfile = dmfile

      def write( self, dmfile, mastertemplate, outfile ):

            try:
                  fp = open( outfile, 'w' )
            except:
                  print "Couldn't write " + outfile + "."
                  sys.exit( 1 )

            buffer = self.generate( mastertemplate )

            # flush the buffer
            fp.write( buffer )
            fp.close()

      def generate( self, key, no = 0 ):
            buffer = ''
            template_file = self.templatedir + '/' + key

            try:
                  tp = open( template_file, 'r' )
            except:
                  print "template " + template_file + ": not found."
                  sys.exit( 1 )

            while 1:
                  line = tp.readline()
                  if not line:
                        break

                  if DmTemplate.regex1.search( line ):
                        line = self.sub( line )
                        buffer = buffer + line
                        continue
                              
                  match = DmTemplate.regex2.search( line )
                  if match:
                        keyno = match.group( 1 )
                        value = self.dmfile.property[key,no+1,\
                                                     string.atoi(keyno)]
                        buffer = buffer + DmTemplate.regex2.sub( value, line )
                        continue

                  match = DmTemplate.regex3.search( line )
                  if match:
                        key = match.group( 1 )
                        for i in range( self.dmfile.keynum[key] ):
                              buffer = buffer + self.generate( key, i )
                        continue

                  # regular line
                  buffer = buffer + line


            return buffer

      def sub( self, line ):
            buffer = ''
            match = DmTemplate.regex1.search( line )
            key = match.group( 1 )

            if not self.dmfile.dic.has_key( key ):
                  print "Keyword " + key + " not found."
                  sys.exit( 1 )

            buffer = DmTemplate.regex1.sub( self.dmfile.dic[key], line )

            return buffer



if __name__ == "__main__":
      
      import getopt

      def printHelp():
            print sys.argv[0], \
                  """[-h] [-d outdir] [-o outprefix] [-t templatedir]"""\
                  """infile"""


      outdir = '.'
      outprefix = 'out'
      templatedir = './'

      masterprefix = 'MASTER'

      try:
            opts, pargs = getopt.getopt( sys.argv[1:],\
                                         'ho:t:d:' )
      except getopt.GetoptError, e:
            print e
            sys.exit( 1 )
            
      for opt, arg in opts:
            if opt == '-h':
                  printHelp()
                  sys.exit( 0 )
            elif opt == '-d':
                  outdir = arg
            elif opt == '-o':
                  outprefix = arg                  
            elif opt == '-t':
                  templatedir = arg
            else:
                  print "invalid option:", opt
                  sys.exit( 1 )

      infilename = pargs[0]
      if infilename == '':
            printHelp()
            sys.exit( 1 )
                                    
      dmfile = DmFile( infilename )
      dmtemplate = DmTemplate( templatedir )
      dmtemplate.setDmFile( dmfile )

      # mastertemplates = templatedir/MASTER.*
      mastertemplates = templatedir + "/" + masterprefix + ".*"
      os.path.expanduser( mastertemplates )
      os.path.expandvars( mastertemplates )
      mastertemplates = glob.glob( mastertemplates )

      if len( mastertemplates ) == 0:
            print "no template found in [" + self.templatedir + "]."
            sys.exit( 1 )

      # generate file for each master template
      for template in mastertemplates:
            prefix, ext = os.path.splitext( template )
            outfile = outdir + '/' + outprefix + ext
            dmtemplate.write( dmfile, os.path.basename( template ), outfile )
