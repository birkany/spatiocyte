#! @PERL_PATH@
###############################<rd2tex>#######################################
#                                                                            #
#        This program converts Reactor Description (.rd file) to             #
#                 Reactor Spec Sheet (.tex file).                            #
#                                                                            #
#      written by Yusuke Saito at Keio University Bioinformatics lab.        #
#                                                                            #
#      Copyright 1998-1999 by Yusuke Saito (t96406ys@sfc.keio.ac.jp)         #
#                          All Rights Reserved                               #
#                                                                            #
##############################################################################

# if you want to set default directory, please modfy here.
$output_directory = ".";
$default_template_directory = @REACTOR_TEMPLATE_DIR@;

$err_mes_td = "\n Command-line rd2tex Users: Specify a template directory with the correct absolute path.\n Makefile Users           : Check the configuration of TEMPLATEDIR in your Makefile.\n";

$err_mes_od = "Specify an output directory with an absolute path.\n";

&search_template;
&filename;
&option;
&open_tex;
&write_header;
&open_template;
&write_rd;
&write_footer;
&close_tex;

##############################################################################
sub search_template{
#    if (-e 'template') {
#	if (-d 'template') {
#	    $template_directory = "./template";
#	} else {
#	    print STDERR "Please remove file 'template'.\n";
#	    exit 1;
#	}
#    } else {
	$template_directory = $default_template_directory;
#    }
}

sub filename{
    $header = "header.tex.in"; 
    $footer = "footer.tex.in";
    $template = "rdtemplate.tex.in";
    $tex = "ReactorDescription.tex";
}

sub option{
    @ARGV2 = @ARGV;
    for($i=0;$i<=$#ARGV;$i++){
        if($ARGV[$i] eq "-h"){
            &help;
        }
        elsif($ARGV[$i] eq "-d"){
            $output_directory = $ARGV[$i+1];
            $ARGV2[$i] =  "";
            $ARGV2[$i+1] =  "";
        }
        elsif($ARGV[$i] eq "-t"){
            $template_directory = $ARGV[$i+1];
            $ARGV2[$i] =  "";
            $ARGV2[$i+1] =  "";
        }
	elsif($ARGV[$i] eq "-o"){
            $tex = $ARGV[$i+1];
            $ARGV2[$i] =  "";
            $ARGV2[$i+1] =  "";
        }
	elsif($ARGV[$i] eq "-s"){
	    if($#ARGV == 1 && $ARGV[1] =~ /(.+)\.rd/){
		$tex = "$1\.tex";
		$header = "noheader.tex.in";
		@ARGV2 = ($ARGV[1]);		
	    }
	}
    }
    for($i=0;$i<=$#ARGV2;$i++){
        if(length($ARGV2[$i])){
            $input_file[$k] = $ARGV2[$i];
            $k++;
        }
    }
    print "template_directory: $template_directory\n";
    print "output_directory: $output_directory\n";
}

sub help{
    print "\n<rd2tex version 1\.1>\n";
    print "written by Yusuke Saito \(t96406ys\@sfc\.keio\.ac\.jp\)\n\n";   
    print "usage: rd2tex filename1\.rd filename2\.rd \.\.\.\n\n"; 
    print "option:   -s             does not change filename.\n";
    print "          -d output_directory\n";
#    print "          -o ouput_filename\n";
    print "          -o output_filename\n";
    print "          -t template_directory\n";
    exit;
}


sub open_tex{
    open(TEX,">$output_directory/$tex")
	|| die("$tex: can't open\n$err_mes_od");
    print "\n";
    print "writing $tex.\n";
    print "\n";
}

sub open_template{
    open (TEMPLATE,"$template_directory/$template") 
	|| die("$template: can't open\n$err_mes_td");
    print "loading $template.\n\n";
}

sub write_header{
    open(HEADER,"$template_directory/$header")
	|| die("$header: can't open\n$err_mes_td");
    print "loading $header.\n";
    
    while(<HEADER>){
	print TEX "$_";
    }
    
    close(HEADER);
}

sub write_rd{
    while($rdfile = shift(@input_file)){
	unless($rdfile =~ /.+\.rd/){
	    die ("$rdfile: filename must end with .rd.\n"); 
	}
	
    if(! &readrd($rdfile)){
	warn("skipping $rdfile...\n");
    }
	
	undef %map;
	undef %property;
	seek (TEMPLATE,0,0);
	print "\n";
    }
}

sub readrd
{
    local($rdfile) = @_;

    my(%map);

    if(!open (RD, "$rdfile") )
    {
	print STDERR "unable to open $rdfile.\n";
	return 1;
    }

    print "loading $rdfile.\n";

    $prekey = "__UNDEFINED__";
    $keynum = 0;

    while($line_rd = <RD>){

        chomp $line_rd;

	if($line_rd =~ /^#.*/){                # do nothing at comment line
	   next; 
        } 

	elsif($line_rd =~ /^(([@\%])[^:]+):\s*(.*)/){
	    $keyl = $1; 
	    $keyr = $3;
	    $key_type = $2;
	    unless($keyl =~ /.([A-Z]+)/){
		#keyword must be constructed by largeletter, number, _
		warn ("warning: illegal keyword [$1]. ignoring..\n");
		next;
	    }
	    if(length($map{$keyl}) != 0 && $key_type eq "@"){
		print STDERR "warning: duplicated keyword [$keyl]"; 
		print STDERR "later one applied.\n";
	    }
	    if($key_type eq "%"){
		if(length($map{$keyl}) == 0){
		    $paranum{$keyl} = 1;           
		}
		else{
		    $paranum{$keyl}++; 
		}
		@tmp = split(/\,/,$keyr);
		for($i=0 ; $i<=$#tmp ; $i++){
		    $property{$keyl,$paranum{$keyl},$i} = $tmp[$i];
		    if($keyl eq "%PARAMETER"){
			$property{$keyl,$paranum{$keyl},0} =~ s/\s//g;
			$property{$keyl,$paranum{$keyl},1} =~ s/\s//g;
		    }
		}
	    }
	    $map{$keyl} = $keyr;
	}

        else{
	    $map{$prekey} .= "\n" . $line_rd;
	}

	$prekey  = $keyl;
	unless(length($keyr)==0){
            $keynum++;
	}
    }

    close(RD);
                  
    print "loaded $keynum keys from $rdfile.\n";
                                  #counting the number of loaded keyword

    $para_num = 1;    
    $sub_num = 1;
    while(<TEMPLATE>){
	$_ =~ s/#\((@[A-Z_]+)\)/$map{$1}/g;
        if($_ =~ /.*#\(%([A-Z_]+)\).*/){
	   if($1 eq "PARAMETER"){
               while($property{'%PARAMETER',$para_num,0}){
		  $para_name = $property{'%PARAMETER',$para_num,0};
		  if($para_name =~ /k(\d+)/){
		      $para_name = "\$k\_\{$1\}\$";
		  }
		  elsif($para_name =~ /k\_(\d+)/){
		      $para_name = "\$k\_\{-$1\}\$";
		  }
		  print TEX "$para_name & ";
		  print TEX "$property{'%PARAMETER',$para_num,1} & ";
		  print TEX "$property{'%PARAMETER',$para_num,2} & ";
		  print TEX "$property{'%PARAMETER',$para_num,3} \\\\ \n";
		  print TEX "\\hline \n";
                  $para_num++;
	      }          
	   }
	   elsif($1 eq "VERSION"){
	       print TEX "E-CELL & ";
	       print TEX "$property{'%VERSION',1,0} & ";
	       print TEX "Reactor & ";
	       print TEX "$property{'%VERSION',1,1} & \n";
	   }
           elsif($1 eq "SUBSTANCE"){
   	       while($property{'%SUBSTANCE',$sub_num,0}){
		   print TEX "$property{'%SUBSTANCE',$sub_num,0} &";
		   print TEX "$property{'%SUBSTANCE',$sub_num,1} &";
		   print TEX "$property{'%SUBSTANCE',$sub_num,2} &";
		   print TEX "$property{'%SUBSTANCE',$sub_num,3} \\\\ \n";
		   print TEX "\\hline \n";
		   $sub_num++;
	       }
	   }
       }
	else{
	    print TEX $_;
	}
    }
}

sub write_footer{
    open(FOOTER,"$template_directory/$footer")
	|| die("$footer: can't open\n$err_mes_td");    
    print "loading $footer.\n";
    
    while(<FOOTER>){
	print TEX "$_";
    }
    close(FOOTER);
}

sub close_tex{
    close(TEX);
    exit(0);
}    


































