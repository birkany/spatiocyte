#!@SHELL@
#
# $Id$
#
# dmtool --- a program to compile and/or docify dynamic module in 
#            E-CELL Simulation Environment
#
# this program is part of E-CELL Simulation Environment.
#
# author:    Kouichi Takahashi <shafi@e-cell.org>
#

# variables substituted by ./configure script

SHAREDIR="@DM_SHARE_DIR@"
BINDIR="@PREFIX@/bin"

CXX="@CXX@"
MV="@MV@"
RM="@RM@"
DMFLAGS="@DM_CXXFLAGS@"
SERIZAWADIR="@PREFIX@/src"

# customizable variables. usually no need to edit

TMPDIR="/tmp"
RD2CH="rd2ch"
RD2TEX="rd2tex"
OUTDIR="./"
CXXFLAGS="$DMFLAGS -I$SERIZAWADIR"
TEXOUT="spec.tex"
INSUFFIX=".rd"
SOSUFFIX=".so"

# internal variables. DO NOT EDIT BELOW
OPTS="vcdfho:st:T:I:B:"
LONGOPTS=\
"verbose,compile,docify=:,force,help,outdir=:,strip,templatedir:,tmpdir=:,includedir=:,bindir=:test"

unset VERBOSE DO_COMPILE DO_DOCIFY DO_STRIP FORCE CLASS TEST_MODE
INCLUDES=""
DTTMPDIR="$TMPDIR/dmtool.$$"


usage() 
{
cat << EOT_USAGE
Compile and/or docify dynamic module.

Usage:
	`basename $0` <classname> [OPTIONS] files...
	`basename $0` -h|--help

EOT_USAGE
}

help()
{
usage
cat << EOT_HELP
Options:
	-c or --compile)	Compile dynamic module.
	-d[filename] or
  	  --docify[filename])	Make TeX documentation from input files.
	-f or --force)		Proceed even if input is older than output.
	-o or --outdir=)	Specify output directory.
	-t or --templatedir=)	Specify template directory.
				[default=$TEMPLATEDIR]
	-T or --tmpdir=)     	Specify temporary directory.
				[default=$TMPDIR]
	--test)			Do nothing. Just print what will happen.
	-I or --includedir=)	Specify include directory for compiler.
	-B or --bindir=)	Specify directory of dynamic module tools.
	-v or --verbose)	Be verbose.
	-h or --help)		Print this message.

This program is part of E-CELL Simulation Environment.
Written by Kouichi Takahashi <shafi@e-cell.org>
EOT_HELP
}

initialize()
{
	trap interrupted 2 9 15
	run_command mkdir $DTTMPDIR
}

cleanup()
{
	run_command $RM -rf $DTTMPDIR
}

interrupted()
{
	echo "interrupted..."
	trap '' 2 9 15
	cleanup
	exit 1
}

run_command()
{
	if [ $TEST_MODE ] ; then
		echo $@
	else
		[ $VERBOSE ] && echo $@
		$@
	fi
return $?
}


# at least one argument is required
if [ -z $1 ] ;  then
	echo $1
	usage; echo $1
	exit 1
fi

if [ "$1" = "-h" -o "$1" = "--help" ] ; then
	help
	exit 0
fi


# get dynamic module class
CLASS=$1
shift

TEMPLATEDIR=$SHAREDIR/$CLASS/template


#
# parse remaining commandline options
#
TEMP=`getopt -o $OPTS --long $LONGOPTS -n "$0" -- "$@"`
if [ $? != 0 ] ; then echo "getopt error..." >&2 ; exit 1 ; fi
eval set -- "$TEMP"

while true ; do
	case "$1" in
		-v|--verbose) VERBOSE=yes ; shift ;;
		-c|--compile) DO_COMPILE=yes ; shift ;;
		-d|--docify|docify) DO_DOCIFY=yes 
			case "$2" in
				"") shift 2 ;;
				*)  TEXOUT="$2" ; shift 2 ;;
			esac ;;
		-f|--force)  FORCE=yes ; shift ;;
		-o|--outdir) OUTDIR=$2 ; shift 2 ;;
		-s|--strip)  DO_STRIP=yes ; shift ;;
		-t|--templatedir) TEMPLATEDIR=$2 ; shift 2 ;;
		-T|--tmpdir)      TMPDIR=$2 ; shift 2 ;;
		--test)		TEST_MODE=yes ; shift ;;
		-I|--includedir)  INCLUDES="$INCLUDES -I$2" ; shift 2 ;;
		-B|--bindir) BINDIR=$2 ; shift 2 ;;
		-h|--help) help ; exit 0 ;;
		--) shift ; break ;;
		*) echo "Internal error!"; exit 1 ;;
	esac
done

# check if TEMPLATEDIR exists

if [ ! -d $TEMPLATEDIR ] ; then
	echo "Template directory for [$CLASS] class does not exist."
	echo "(template directory = [$TEMPLATEDIR])"
	exit 1
fi


#
# initialize
#
initialize

RD2CH="$BINDIR/$RD2CH"
if [ ! -x $RD2CH ] ; then
	echo "can't execute $RD2CH."
	exit 1
fi

RD2TEX="$BINDIR/$RD2TEX"
if [ ! -x $RD2TEX ] ; then
	echo "can't execute $RD2TEX."
	exit 1
fi

#
# drop files which do not end with $INSUFFIX
#

for file in $@ ; do
	if [ `basename $file $INSUFFIX` != `basename $file` ] ; then
		inputs="$inputs $file"
	fi
done

#
# compile dm files
#
if [ $DO_COMPILE  ] ; then
	for rdfile in $inputs;  do 
		base=`basename $rdfile $INSUFFIX`
		sofile=$base$SOSUFFIX
		cppfile=$base.C
		[ $VERBOSE ] && echo "$0: compiling $name..." 

		if [ ! $FORCE ] ; then
			if [ -f $sofile -a $rdfile -nt $sofile ] ; then
				echo -n "$rdfile is newer than $sofile... "
				echo "skipping.."
				break
			fi
		fi

		# make source files. (-> .[Ch])
		run_command "$RD2CH $rdfile -d $DTTMPDIR -t $TEMPLATEDIR"
		if [ $? = 0 ] ; then
			:
		else
			echo "error: conversion of $rdfile (by $RD2CH) failed."
			cleanup
			exit 1
		fi

		# compile
		run_command "$CXX $CXXFLAGS -I$SHAREDIR/$CLASS/include $INCLUDES $DTTMPDIR/$cppfile -o $DTTMPDIR/$sofile"
		if [ $? = 0 ] ; then
			# move resulting so to OUTDIR
			run_command $MV $DTTMPDIR/$sofile $OUTDIR
		else
			echo "error: compilation of $rdfile failed."
			cleanup
			exit 1
		fi
	done
fi

#
# make tex file
#

if [ $DO_DOCIFY  ] ; then
	run_command $RD2TEX $inputs -o $OUTDIR/$TEXOUT
fi

cleanup

exit 0


