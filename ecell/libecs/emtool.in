#!/bin/sh
#
#emtool --- a program to compile and/or docify dynamic module in 
#           E-CELL Simulation Environment Version 3
#
# author:  Tomoya Kitayama <tomo@e-cell.org>
#

PACKAGE=@PACKAGE@
VERSION=@VERSION@

prefix=@prefix@
exec_prefix=@prefix@
pythondir=@pythondir@

BINDIR="${exec_prefix}/bin"
ECELL_INCLUDE="${prefix}/include/ecell"
LIBECS_INCLUDE="${ECELL_INCLUDE}/libecs"

CXX="c++"
MV="/bin/mv"
RM="/bin/rm"

DMGEN="${exec_prefix}/bin/dmgen"
DMCOMPILE="${exec_prefix}/bin/dmcompile"
INSUFFIX=".dm"
SOSUFFIX=".so"

CPPSUFFIX=".cpp"
HPPSUFFIX=".hpp"

unset DO_COMPILE DO_GENERATE VERBOSE

TMPDIR="/tmp"
ETTMPDIR="$TMPDIR/emtool.$$"

usage() 
{
cat << EOT_USAGE

Compile and/or dynamic module in
E-CELL Simulation Environment Versin 3.

Usage:
	`basename $0` [OPTIONS] files...
	`basename $0` -h|--help
EOT_USAGE
}

help()
{
usage
cat << EOT_HELP

Options:
	-a or --all                 Create a so file from a dm file.
	-g or --generate            Only generate a .cpp file from a dm file.
	-c or --compile             Only compile a .cpp file.
        -t or --template file       Specify a dmgen template file.
        -T or --type type           Specify a template type.
	-i or --include directory   Specify a dmcompile include file.
        -m or --em file          Specify em file.
        -v or --verbose   	    Be verbose.
        -h or --help		    Print this message.


This program is part of E-CELL Simulation Environment Version 3.
Written by Tomoya Kitayama <tomo@e-cell.org>
EOT_HELP
}

initialize()
{
	trap interrupted 2 9 15
	run_command mkdir $ETTMPDIR
}

cleanup()
{
	run_command $RM -rf $ETTMPDIR
}

interrupted()
{
	echo "interrupted..."
	trap '' 2 9 15
	cleanup
	exit 1
}

message()
{
    if [ $VERBOSE ] ; then
	echo $@
    fi
}

run_command()
{
    message $@

    if [ $VERBOSE ] ; then
	$@
    else
	$@ > /dev/null
    fi
}

#at least one argument is required

if [ -z $1 ] ;then 
    help;
    exit 1
fi

# print help message
 
if [ "$1" = "-h" -o "$1" = "--help" ] ; then
    help
    exit 0
fi

# get dynamic module class

#default class is process
TYPE='Process'

TEMPLATEDIR="${prefix}/share/ecell/@VERSION@/template/$TYPE"

while [ -n "$(echo $1 | grep '-')" ]; do
    case "$1" in
	-a|--all) DO_ALL=yes ; shift ;;
	-g|--generate) DO_GENERATE=yes ; shift ;;
	-T|--type) TYPE=$2 ; shift ;;
	-c|--compile) DO_COMPILE=yes ; shift ;;
	-t|--template) HAVE_TEMPLATE=yes ; templatefile=$2 ; shift 2 ;;
	-i|--include) HAVE_INCLUDE=yes ; includedir=$2 ; shift 2 ;;
	-m|--em) HAVE_EMPY=yes ; EMPYFILE=$2 ; shift 2 ;;
	-v|--verbose) VERBOSE=yes ; shift ;;
	-h|--help) help ; exit 0 ;;
	*) echo "Invarid Option! " ; help ; exit 1 ;;
    esac
done

#
#initialize & get filename
#

initialize

inputfile=$1
base=`basename $inputfile .dm`
base=`basename $base .cpp`
cppfile=$base$CPPSUFFIX
sofile=$base$SOSUFFIX


CURRENTDIR=$(pwd)


if [ $DO_ALL ] ; then 

    #copy dmfile to ETTMPDIR
    run_command "cp $inputfile $ETTMPDIR" 

    run_command "pushd $ETTMPDIR"     
    DO_GENERATE=yes
    DO_COMPILE=yes
fi


#
# dm to cpp/hpp source file.
#

if [ $DO_GENERATE ] ; then 
    
    command_string="$DMGEN $TYPE -d $inputfile"

    if [ $HAVE_TEMPLATE ] ; then 
	command_string="$command_string -t $templatefile"
    fi

    if [ $HAVE_EMPY ] ; then 
	command_string="$command_string -m $emfile"
    fi

    if run_command $command_string ; then
	message "generated $base.cpp"
    else
	echo "error occured in code generation stage."
	cleanup
	exit 1
    fi

    unset command_string

fi


#
#Compile cpp to so file.
#

if [ $DO_COMPILE  ] ; then 
	
    command_string="$DMCOMPILE $base.cpp -I $CURRENTDIR -I $ECELL_INCLUDE -I $LIBECS_INCLUDE -I . -I .."     

    if [ $HAVE_INCLUDE ] ; then 
	command_string="$command_string -I $includedir"
    fi

    if run_command $command_string ; then
	message "generated $base.so"
    else
	echo "error occured in compiling stage."
	cleanup
	exit 1
    fi

    unset command_string
fi

if [ $DO_ALL ] ; then 
    run_command "popd"     
    #copy sofile to current dir
    run_command "cp $ETTMPDIR/$base.so ." 
fi

#
#cleanup & exit
#

cleanup

exit 0

