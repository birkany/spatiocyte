#!/usr/bin/env python

# Eml to SBML converter

import sys
import string
import os
import types
import getopt
import time
import sets

import ecell.converter.eml2sbml as conv

def usage():
    aProgramName = os.path.basename( sys.argv[0] )

    print '''
%s -- convert eml to em
    
Usage:
    %s [-h] [-f] [-o outfile] infile

    
Options:
    -h or --help    :  Print this message.
    -f or --force   :  Force overwrite even if outfile already exists.
    -o or --outfile=:  Specify output file name.  '-' means stdout.
    
''' % ( aProgramName, aProgramName )

def main():
    # commandline processing
    try:
        opts, args = getopt.getopt( sys.argv[1:], "hfo:",
                                    ["help","force", "outfile="] )
    except getopt.GetoptError:
        usage()
        sys.exit( 1 )

    aSBMLFileName = None
    aForceFlag = 0

    for anOption, anArg in opts:
        if anOption in ( "-h", '--help' ):
            usage()
            sys.exit( 0 )

        if anOption in ( "-f", '--force' ):
            aForceFlag = 1            

        if anOption in ( "-o", "--outfile" ):
            aSBMLFileName = anArg
            
    if len( args ) == 0:
        sys.stderr.write( "No input file.\n" )
        sys.exit( 1 )

    anEmlFileName = args[0]

    aBaseName = os.path.basename( anEmlFileName )
    aBaseName, anExt = os.path.splitext( aBaseName )

    if aSBMLFileName == None:
        if anExt == '.eml' or anExt == '.xml':
            anExt = '.xml'
        else:
            anExt += '.xml'

        aSBMLFileName = aBaseName + anExt

    if aSBMLFileName == '-':
        aSBMLFile = sys.stdout

    else:
        if os.path.isfile( aSBMLFileName ) and aForceFlag == 0:
            sys.stderr.write( "Output file %s exists. Use -f to overwrite.\n"
                              % aSBMLFileName )
            sys.exit( 1 )

    aSBMLLevel = raw_input( "SBML Model Level? ( 1 or 2 ) : " )

    if aSBMLLevel == '1':
        aSBMLVersion = raw_input( "SBML Model Version? ( 1 or 2 ) : " )
        if aSBMLVersion != '1' and aSBMLVersion != '2':
            raise ValueError," Such SBML Version is not defined"
    elif aSBMLLevel == '2':
        aSBMLVersion = 1
    else:
        raise ValueError," Such SBML Level is not defined"


    anEmlFile = open( anEmlFileName )
    aSBMLFile = open( aSBMLFileName, 'w' )

    aSBMLString = conv.convert( anEmlFile.read(),
                                basename = aBaseName,
                                level = aSBMLLevel,
                                version = aSBMLVersion )
    aSBMLFile.write( aSBMLString )
    
    aSBMLFile.close()

if __name__ == '__main__':
    main()
