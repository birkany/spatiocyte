#!/usr/bin/env ecell3

import sys
import getopt
import os

import ecell.ecs
import ecell.Session

#FIXME: commandline processing needed

def usage():
    aProgramName = os.path.basename( sys.argv[0] )
    print '''
%s -- invoke ecell3 python intract mode or run ess file

Usage:

       %s [-f] [-f emlfile]          : Load eml file 
				       and invoke ecell3 intract mode
       %s [essfile] [-e essfile]     : Run ess file
       %s                            : Invoke ecell3 intract mode
       %s [-h]                       : Print this message
       
Options:

        -e or --exec=[.ess file]  :  load script (.ess) file
        -f or --file=[.eml file]  :  load model (.eml) file
	-h or --help              :  Print this message.

        Do not use -e and -f at same time.

Configurations:

	If the environment variable ECELL3_DM_PATH is set to a colon (:) 
        separated directory path, it loads dynamic modules from there.
	
	example: 
        
	ECELL3_DM_PATH=/home/user/dm:/home/user/dm_other ecell3-session

'''% ( aProgramName, aProgramName, aProgramName, aProgramName, aProgramName )

def main():

    # -------------------------------------
    # initialize file names
    # -------------------------------------
    anEmlFile = None
    anEssFile = None
    anEmlFlag = 0
    
    if len( sys.argv ) == 2:	
        if not (sys.argv[1])[0] == "-":
            if not os.path.isfile( sys.argv[1] ):
                print "File Name Error: "+ sys.argv[1] + " is not Exist."
                usage()
                sys.exit(0)
            anEssFile = sys.argv[1]

    # -------------------------------------
    # gets options
    # -------------------------------------
    try:
        opts , args = getopt.getopt( sys.argv[1:] , 'he:ff:',
                                     ["help", "exec=", "file="])
    except:
        usage()
        sys.exit(1)
        
    # -------------------------------------
    # checks argument
    # -------------------------------------
    for anOption, anArg in opts:

        # prints help message
        if anOption in ( "-h", '--help' ):
            usage()
            sys.exit(0)
            
        # executes script file (.ess)
        if anOption in ( "-e", '--exec'):
            if not anArg:
                print "Warning: not specify ess file"
                usage()
		sys.exit(0)
	    anEssFile = anArg
            
        # load model file (.eml)
        if anOption in ( "-f", '--file' ):
            if not anArg:
                print "Warning: not specify eml file"
                usage()
		sys.exit(0)
            anEmlFile = anArg            
            
            
    if anEssFile and anEmlFile:
        print "Warning: Do not use -e and -f at same time."
        usage()
        sys.exit(0)

    #FIXME:
    aParameters = {}
    
    aSimulator = ecell.ecs.Simulator()
    aSession = ecell.Session( aSimulator )

    if anEssFile:
        aSession.loadScript( anEssFile, aParameters )

    elif anEmlFile:
        aSession.loadModel(anEmlFile)
        aSession.interact( aParameters )

    else:
        aSession.interact( aParameters )
         
if __name__ == '__main__':
	main()
