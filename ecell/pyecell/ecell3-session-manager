#!/usr/bin/env python

import sys
import string
import getopt
import os

import ecell.config
import ecell.ecs
import ecell.emc
import ecell.Session
import ecell.SessionManager

DEFAULT_ENVIRONMENT = 'Local'

def usage():
    aProgramName = os.path.basename( sys.argv[0] )
    print '''
%(appname)s -- invoke ecell3-session-manager python intract mode or
               run esm file

Usage:
    %(appname)s [-e] [-e esmfile]  : Load script (.esm) file 
    %(appname)s                    : Run in interactive mode
    %(appname)s [-h]               : Print this message
       
Options:
    -e or --exec=[.esm file]           :  load script (.esm) file
    -c or --concurrency=[int]          :  Set concurrency
    -E or --environment=[environment]  :  Set environment
       
       
    -DNAME=VALUE                       :  Set session parameter
    --parameters="[python dictionary]" :  Set session parameters
     
    -h or --help              :  Print this message.

    Example: 
      %(appname)s -DNAME1=VALUE1 -DNAME2=VALUE2
      %(appname)s --parameters="{NAME1:VALUE1,NAME2:VALUE2}"

    Note that spaces are not allowed in names and values.

Configurations:
    If ECELL3_DM_PATH environment variable is set to a colon (%(pathsep)s) 
    separated directory path, it tries to find dynamic modules within the
    locations referred to by it.
 
    Example: 
      ECELL3_DM_PATH=/home/user/dm%(pathsep)s/home/user/dm_other %(appname)s

'''% { 'appname': aProgramName, 'pathsep': os.pathsep }

def main():
    ecell.ecs.setDMSearchPath( os.pathsep.join( ecell.config.dm_path ) )

    # -------------------------------------
    # initialize 
    # -------------------------------------
    anEmsFile = None
    aParameters = {}
    aConcurrency = None
    anEnvironment = DEFAULT_ENVIRONMENT 

    # -------------------------------------
    # gets options
    # -------------------------------------
    try:
        opts, args = getopt.getopt(
            sys.argv[ 1: ] , 'he:f:D:c:E:',
            [
                "parameters=",
                "help",
                "exec=",
                "file=",
                "concurrency=",
                "environment="
                ]
            )
    except:
        usage()
        sys.exit( -1 ) 


    # -------------------------------------
    # checks argument
    # -------------------------------------
    for anOption, anArg in opts:

        # ------------------------------
        # prints help message
        # ------------------------------
        if anOption in ( '-h', '--help' ):
            usage()
            sys.exit(0)
            
        # ------------------------------
        # executes script file (.esm)
        # ------------------------------
        if anOption in ( '-e', '--exec' ):
            if not anArg:
                sys.stderr.write( "Error: not specify esm file\n" )
                usage()
                sys.exit( 2 )
            anEmsFile = anArg

        # ------------------------------
        # set session-manager parameters            
        # ------------------------------
        if anOption == '-D':
            aSplitArgList = string.split( anArg, '=' )

            if not aSplitArgList[ 1 ]:
                aSplitArgList[ 1 ] = 1
            
            try:
                anEvaluatedString = eval(aSplitArgList[1])
                aParameters[ aSplitArgList[ 0 ] ] = anEvaluatedString
            except:
                aParameters[ aSplitArgList[ 0 ] ] = aSplitArgList[ 1 ]

        # ------------------------------
        # set session-manager parameters            
        # ------------------------------
        if anOption == '--parameters':
            try:
                anEvaluatedArg = eval(anArg)
            except:
                import traceback 
                anErrorMessageList = traceback.format_exception(
                    sys.exc_type, sys.exc_value, sys.exc_traceback )
                for aLine in anErrorMessageList: 
                    sys.stderr.write( aLine )
                sys.stderr.write( "Error: %s is not a valid python expression.\n" % anArg )
                sys.exit( -1 )

            # check anEvaluatedArg type
            if not type( anEvaluatedArg ) == dict:
                sys.stderr.write( "Error: %s does not result in a python dictionary.\n" % aParameters )
                sys.exit( -1 )

            # add parameters to aParameters 
            for aKeyString in anEvaluatedArg.keys():
                aParameters[ aKeyString ] = anEvaluatedArg[ aKeyString ]


        # ------------------------------
        # set concurrency
        # ------------------------------
        if anOption in ( '-c', '--concurrency' ):

            # ----------------------------
            # check the existance of value
            # ----------------------------
            if not anArg:
                sys.stderr.write( "Error: concurrency value not specified.\n" )
                usage()
                sys.exit( -1 )

            # ----------------------------
            # convert str to int
            # ----------------------------
            try:
                aConcurrency = string.atoi( anArg )
            except ValueError:
                sys.stderr.write( "Error: invalid parameter --concurrency=int\n" )
                usage()
                sys.exit( -1 )

        # ------------------------------
        # set environment
        # ------------------------------
        if anOption in ( '-E', '--environment', ):
            # ----------------------------
            # check the existance of value
            # ----------------------------
            if not anArg:
                sys.stderr.write( "Error: environment value not specified.\n" )
                usage()
                sys.exit(2)

            anEnvironment = anArg


    # -------------------------------------
    # check EMS file
    # -------------------------------------
    if anEmsFile == None and ( len(sys.argv) >= (len(opts)*2+2)):

        if ( len( sys.argv ) != 2 and not sys.argv[ -1 ][ 0 ] == "-" ) or \
                len( sys.argv ) == 2:
            if not os.path.isfile( sys.argv[-1] ):
                sys.stderr.write( "Error: %s does not exist.\n" % sys.argv[ -1 ] )
                sys.exit( 1 ) 

            if sys.argv[ -1 ] != sys.argv[ 0 ]:
                anEmsFile = sys.argv[ -1 ]

    aModulePath= [ ecell.__path__[ 0 ] + os.sep + "SessionManager" ]

    aSessionManager = ecell.SessionManager.SessionManager(
        aModulePath, aConcurrency, anEnvironment )

    if anEmsFile:
        aSessionManager.loadScript( anEmsFile, aParameters  )
    else:
        aSessionManager.interact( aParameters  )
            
         
if __name__ == '__main__':
    main()
    sys.exit( 0 )
