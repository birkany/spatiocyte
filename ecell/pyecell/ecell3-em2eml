#!/usr/bin/env python

"""
A program for converting EM to EML.
This program is part of E-Cell Simulation Environment Version 3.
"""

__program__ = 'ecell3-em2eml'
__version__ = '0.1'
__author__ = 'Kentarou Takahashi and Koichi Takahashi <shafi@e-cell.org>'
__copyright__ = 'Copyright (C) 2002-2003 Keio University'
__license__ = 'GPL'


import sys
import os
import string 
import getopt
import tempfile
from StringIO import StringIO

import ecell.converter.em2eml as conv
import ecell.em.preprocessor as pp

def usage():
    aProgramName = os.path.basename( sys.argv[0] )
    print '''
%s -- convert em to eml

Usage: %s [-h] [-o outfile] [-p emlfile] infile.em

       By default this command automatically overwrite infile.eml.

Options:
        -h or --help       :  Print this message.
        -o or --outfile=   :  Specify output file name.  '-' means stdout.
        -p or --patch=     :  Patch source eml file
        -E or --preprocess :  Preprocessing only. implies -o -.
''' % ( aProgramName, aProgramName )
    


def main():
    try:
        opts , args = getopt.getopt( sys.argv[1:] , 'DEho:p:',
                         ['help', 'debug', 'patch', 'outfile=',
                          'preprocess'])
        args[0]
    except:
        usage()
        sys.exit(1)

    anOutputFileName = None
    aSrcEmlFileName = None
    aForceFlag = True # Default Automatic overwrite mode
    aPatchFlag = False
    debug = False
    preprocessing_only = False
    for anOption, anArg in opts:
        if anOption in ( "-h", '--help' ):
            usage()
            sys.exit(0)
        if anOption in ( "-D", '--debug' ):
            debug = True
        if anOption in ( "-o", '--outfile'):
            anOutputFileName = anArg
        if anOption in ( "-p", '--patch'):
            aPatchFlag = True
            aSrcEmlFileName = anArg
        if anOption in ( "-E", '--preprocess'):
            preprocessing_only = True
            anOutputFileName = '-'            
    if len( args ) == 0:
        sys.stderr.write( "No input file.\n" )
        sys.exit( 1 )

    if args[0] == '-':
        anOutputFileName = '-'
        anEmFileName = args[1]
    else:
        anEmFileName = args[0]
        anEmFile = open( anEmFileName, 'r' )
    aBaseName = os.path.basename( anEmFileName )
    aBaseName, anExt = os.path.splitext( aBaseName )

    # <infile> check mode
    if anExt != '.em':
        sys.stderr.write( "input is not a .em file.\n" )
        sys.exit( 1 )

    if anOutputFileName == None:
        if anExt == '.em':
            anExt = '.eml'
        else:
            anExt += '.eml'

        anOutputFileName = aBaseName + anExt

    if anOutputFileName == '-':
        anOutputFile = sys.stdout

    if preprocessing_only:
        pp.preprocess( anEmFile, anOutputFile )
        sys.exit(0)

    out = StringIO()
    pp.preprocess( anEmFile, out )
    content = out.getvalue()

    aSrcEml = None
    if aPatchFlag:
        aSrcEmlFile = open( aSrcEmlFileName, 'r' )
        aSrcEml = ecell.eml.Eml( aSrcEmlFile )

    anEmlObject = conv.convert( content )
        
    aString = anEmlObject.asString()
    
    if anOutputFileName == '-':
        print aString
    else:
        # Default automatic overwrite mode
        if os.path.isfile(anOutputFileName) and aForceFlag:
            pass
        
        elif not os.path.isfile(anOutputFileName):
            pass
        else:
            sys.stderr.write( "The output file already exists. To overwrite, use -f or --force.\n" )
            sys.exit( 1 )
            
        anOutputFile = open(anOutputFileName, 'w')
        anOutputFile.write(aString)
        anOutputFile.close()
        


if __name__ == '__main__':
    main()
