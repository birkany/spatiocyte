=======================================================================
Release notes for E-Cell Simulation Environment Version 3 (E-Cell SE 3)
=======================================================================

Koichi Takahashi <shafi@e-cell.org>

What is E-Cell System?
======================
E-Cell is a generic software package for cellular modeling and simulation.  

Files and directories
=====================
In the package, files are organized as follows::

  -+- README:    This file
   |
   +- INSTALL:   Installation instructions
   |
   +- ChangeLog: Automatically generated cvs log 
   |
   +- NEWS:      Project log
   |
   +- COPYING:   License
   |
   +- AUTHORS:   List of authors
   |
   +- ecell/ --> Core portion of E-Cell SE 3, or Hekkoro
   |  |
   |  +- libecs/       --> Koyurugi: Class library for cell modeling and
   |  |                    simulation (E-Cell SE 3's innermost core)
   |  +- libemc/       --> E-Cell Micro Core (EMC): C++ Facade API of Koyurugi
   |  |
   |  +- pyecs/        --> Python binding of EMC and Koyurugi
   |  |
   |  +- pyecell/      --> Python E-Cell library
   |  |
   |  +- session-monitor/  --> GUI session monitor (gecell)
   |  |
   |  +- model-editor/ --> GUI model editor (ecell3-modeleditor)
   |  |
   |  +- toollauncher/ --> GUI tool launcher 
   |
   +- dmtool/          --> C++ class library for dynamic loading of object
   |
   +- doc/             --> Documentations 
   |  |
   |  +- users-manual/ --> Users manual
   |  |
   |  +- samples/      --> Sample models
   |
   +- libltdl/         --> Libtool's dynamic module loader library

And installed in the following structure::

 PREFIX -+- bin/       --> E-Cell system toolsuite
         |
         +- include/   --> Header files (for developers)
         |  |
         |  +- dmtool/
         |  |
         |  +- ecell-3.1/
         |     |
         |     +- libecs/
         |     |
         |     +- libemc/
         |
         +- lib/       --> Shared libraries and python modules
         |  |
         |  +- python?.?/  --> Python modules
         |  |
         |  +- ecell-3.1/
         |     |
         |     +- dms      --> Standard dynamic modules
         |     |
         |     +- model-editor     --> Scripts and data for Model Editor
         |     |
         |     +- session-monitor  --> Scripts and data for Session Monitor
         |     |
         |     +- toollauncher     --> Scripts and data for Tool Launcher
         |
         +- share/
            |
            +- ecell-3.1/
            |  |
            |  +- dms/     --> Sources for the standard dynamic modules.
            |
            +- doc/
               |
               +- ecell/   --> E-Cell Documents
                  |
                  +- samples/      --> Sample models
                  |
                  +- users-manual* --> Users manual
                  |
                  +- api           --> API reference
                  |
                  +- model-editor  --> Model Editor documentation


About the code names
--------------------
Hekkoro
    Code name for E-Cell SE Version 3 (libecs, libemc and pyecs)
Koyurugi
    Code name for the libecs class library
Osogo
    Code name for the GUI Session monitor (gecell)

Documentation
=============
The E-Cell 3 users manual is placed under {PREFIX}/share/doc/eusers-manual .

If you have doxygen, API reference will be built and installed in
{PREFIX}/share/doc/api.

Basic Usage
===========

1. Using E-Cell from python interpreter
---------------------------------------
By default a python binding (pyecs) is built.

To invoke a E-Cell Session Script interpreter in interactive mode, use ``ecell3-sesion`` script. Note that the script expects {PREFIX}/bin is included in PATH environment, where {PREFIX} is the directory path that was specified to configure. 
(If you have not specified it, it falls back to /usr/local.)

A typical command-line session is as follows::

   $ ecell3-session
   ecell3-session [ E-Cell SE Version 3.1.106, on Python Version 2.3.4 ]
   Copyright (C) 1996-2007 Keio University.
   Send feedback to Koichi Takahashi <shafi@e-cell.org>
   ecell3-session>>>

In the above output, ``ecell3-session>>>`` is the prompt of ecell3-session. That accepts almost everything of interactive Python.

The below example first loads a model that is stored in simple.eml, and then run it for 10 seconds in simulation time::

   ecell3-session>>> loadModel( 'simple.eml' )
   <simple.eml, t=0>>> run( 10 )
   <simple.eml, t=10.001>>>

2. Using E-Cell from Session Monitor GUI
----------------------------------------
If you have python, and pygtk2 installed, a GUI session monitor, is built.

To use Session Monitor, type::

   $ ecell3-session-monitor

Sample Models
=============

Sample models are installed under {PREFIX}/share/doc/samples. Each model is
stored as a EM script, while ecell toolsuite only accept XML-based EML files.

EM scripts can be converted to EML files through the program ``ecell3-em2eml``::

   $ ecell3-em2eml Drosophila.em

This will create Drosophila.eml in the current working directory.

Some samples require that the accompanying dynamic modules (DM's) be
built before running simulation.  These modules are provided as C++ sources
which can be compiled using ``ecell3-dmc``::

   $ ecell3-dmc SomeModule.cpp

For more information about the dynamic module, refer to the users manual.

$Id$

